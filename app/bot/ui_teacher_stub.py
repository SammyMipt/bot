from __future__ import annotations

import os

from aiogram import F, Router, types
from aiogram.filters import Command

from app.core import callbacks, state_store
from app.core.auth import Identity
from app.core.repos_epic4 import get_active_material, list_weeks_with_titles
from app.db.conn import db

try:
    from aiogram.types import BufferedInputFile
except Exception:  # pragma: no cover
    BufferedInputFile = None  # type: ignore

router = Router(name="ui.teacher.stub")


def _uid(x: types.Message | types.CallbackQuery) -> int:
    return x.from_user.id


def _nav_key(uid: int) -> str:
    return f"t_nav:{uid}"


def _cw_key(uid: int) -> str:
    return f"t_cw:{uid}"


def cb(action: str, params: dict | None = None, role: str | None = None) -> str:
    payload = {"action": action}
    if params:
        payload.update(params)
    # op "t" ‚Äî teacher UI namespace; role is dynamic (teacher/owner)
    return callbacks.build("t", payload, role=role)


def _is(op: str, actions: set[str]):
    def _f(cq: types.CallbackQuery) -> bool:
        try:
            op2, key = callbacks.parse(cq.data)
            if op2 != op:
                return False
            _, payload = state_store.get(key)
            return payload.get("action") in actions
        except Exception:
            return False

    return _f


def _stack_get(uid: int) -> list[dict]:
    try:
        action, st = state_store.get(_nav_key(uid))
        if action != "t_nav":
            return []
        return st.get("stack") or []
    except Exception:
        return []


def _stack_set(uid: int, stack: list[dict]) -> None:
    state_store.put_at(_nav_key(uid), "t_nav", {"stack": stack}, ttl_sec=1800)


def _stack_push(uid: int, screen: str, params: dict | None = None) -> None:
    st = _stack_get(uid)
    st.append({"s": screen, "p": params or {}})
    _stack_set(uid, st)


def _stack_pop(uid: int) -> dict | None:
    st = _stack_get(uid)
    if not st:
        return None
    st.pop()
    _stack_set(uid, st)
    return st[-1] if st else None


def _stack_reset(uid: int) -> None:
    _stack_set(uid, [{"s": "home", "p": {}}])


def _nav_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=cb("back")),
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=cb("home")
                ),
            ]
        ]
    )


def _impersonation_active(uid: int) -> bool:
    try:
        action, st = state_store.get(f"impersonate:{uid}")
        return action == "imp_active" and st.get("exp", 0) >= state_store.now()
    except Exception:
        return False


def _main_menu_kb(role: str, uid: int) -> types.InlineKeyboardMarkup:
    rows: list[list[types.InlineKeyboardButton]] = [
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=cb("sch_create", role=role)
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
                callback_data=cb("sch_manage", role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üß© –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data=cb("presets", role=role)
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìö –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                callback_data=cb("materials", role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç", callback_data=cb("checkwork", role=role)
            )
        ],
    ]
    if _impersonation_active(uid):
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üëë –ú–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data=callbacks.build(
                        "own", {"action": "start_owner"}, role="owner"
                    ),
                )
            ]
        )
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏—é",
                    callback_data=callbacks.build(
                        "own", {"action": "imp_stop"}, role="owner"
                    ),
                )
            ]
        )
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _week_id_by_no(week_no: int) -> int | None:
    with db() as conn:
        row = conn.execute(
            "SELECT id FROM weeks WHERE week_no=?", (week_no,)
        ).fetchone()
        return int(row[0]) if row else None


def _week_title(week_no: int) -> str:
    weeks = dict(list_weeks_with_titles(limit=200))
    return weeks.get(week_no, "")


def _materials_types_kb(week: int, role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ–¥–µ–ª–∏",
                callback_data=cb("materials_send", {"week": week, "t": "p"}, role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìò –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                callback_data=cb("materials_send", {"week": week, "t": "m"}, role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìö –ö–æ–Ω—Å–ø–µ–∫—Ç",
                callback_data=cb("materials_send", {"week": week, "t": "n"}, role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
                callback_data=cb("materials_send", {"week": week, "t": "s"}, role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üé• –ó–∞–ø–∏—Å—å –ª–µ–∫—Ü–∏–∏",
                callback_data=cb("materials_send", {"week": week, "t": "v"}, role=role),
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


# ------- Entry points -------


@router.message(Command("teacher"))
async def teacher_menu_cmd(m: types.Message, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await m.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    uid = _uid(m)
    _stack_reset(uid)
    await m.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=_main_menu_kb(actor.role, uid)
    )


@router.message(Command("teacher_menu"))
async def teacher_menu_alt_cmd(m: types.Message, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await m.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    uid = _uid(m)
    _stack_reset(uid)
    await m.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=_main_menu_kb(actor.role, uid)
    )


@router.callback_query(_is("t", {"home"}))
async def tui_home(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    _stack_reset(uid)
    try:
        await cq.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=_main_menu_kb(actor.role, uid)
        )
    except Exception:
        await cq.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=_main_menu_kb(actor.role, uid)
        )
    await cq.answer()


@router.callback_query(_is("t", {"back"}))
async def tui_back(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    uid = _uid(cq)
    prev = _stack_pop(uid)
    if not prev:
        return await tui_home(cq, actor)
    screen = prev.get("s")
    params = prev.get("p") or {}
    if screen == "sch_create":
        return await tui_sch_create(cq, actor)
    if screen == "sch_manual":
        return await tui_sch_manual(cq, actor)
    if screen == "sch_manual_place":
        cq.data = cb(
            "sch_manual_place", {"mode": params.get("mode", "online")}, role=actor.role
        )
        return await tui_sch_manual_place(cq, actor)
    if screen == "sch_manual_date":
        cq.data = cb("sch_manual_date", role=actor.role)
        return await tui_sch_manual_date(cq, actor)
    if screen == "sch_manual_time":
        cq.data = cb("sch_manual_time", role=actor.role)
        return await tui_sch_manual_time(cq, actor)
    if screen == "sch_manual_duration":
        cq.data = cb("sch_manual_duration", role=actor.role)
        return await tui_sch_manual_duration(cq, actor)
    if screen == "sch_manual_capacity":
        cq.data = cb("sch_manual_capacity", role=actor.role)
        return await tui_sch_manual_capacity(cq, actor)
    if screen == "sch_manual_preview":
        cq.data = cb("sch_manual_preview", role=actor.role)
        return await tui_sch_manual_preview(cq, actor)
    if screen == "sch_preset":
        return await tui_sch_preset(cq, actor)
    if screen == "sch_preset_period":
        cq.data = cb("sch_preset_period", role=actor.role)
        return await tui_sch_preset_period(cq, actor)
    if screen == "sch_preset_preview":
        cq.data = cb("sch_preset_preview", role=actor.role)
        return await tui_sch_preset_preview(cq, actor)
    if screen == "sch_manage":
        return await tui_sch_manage(cq, actor)
    if screen == "presets":
        return await tui_presets(cq, actor)
    if screen == "presets_create":
        return await tui_presets_create(cq, actor)
    if screen == "materials":
        return await tui_materials(cq, actor)
    if screen == "materials_week":
        cq.data = cb("materials_week", {"week": params.get("week", 1)}, role=actor.role)
        return await tui_materials_week(cq, actor)
    if screen == "checkwork":
        return await tui_checkwork(cq, actor)
    if screen == "cw_by_date":
        return await tui_cw_by_date(cq, actor)
    if screen == "cw_by_student":
        return await tui_cw_by_student(cq, actor)
    return await tui_home(cq, actor)


# ------- Schedule: Create -------


def _sch_create_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üß± –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã (–Ω–∞ –¥–µ–Ω—å)",
                callback_data=cb("sch_manual", role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚ö° –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data=cb("sch_preset", role=role)
            )
        ],
    ]
    rows.append(_nav_keyboard().inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"sch_create"}))
async def tui_sch_create(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    try:
        await cq.message.edit_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=_sch_create_kb(actor.role)
        )
    except Exception:
        await cq.message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=_sch_create_kb(actor.role)
        )
    await cq.answer()
    _stack_push(_uid(cq), "sch_create", {})


def _sch_manual_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üè´ –û—á–Ω–æ",
                callback_data=cb("sch_manual_place", {"mode": "offline"}, role=role),
            ),
            types.InlineKeyboardButton(
                text="üñ• –û–Ω–ª–∞–π–Ω",
                callback_data=cb("sch_manual_place", {"mode": "online"}, role=role),
            ),
        ],
    ]
    rows.append(_nav_keyboard().inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"sch_manual"}))
async def tui_sch_manual(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–®–∞–≥ 1/7 ‚Äî —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç:"
    try:
        await cq.message.edit_text(text, reply_markup=_sch_manual_kb(actor.role))
    except Exception:
        await cq.message.answer(text, reply_markup=_sch_manual_kb(actor.role))
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual", {})


def _sch_manual_date_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="‚àí2",
                callback_data=cb("sch_manual_time", {"date": "m2"}, role=role),
            ),
            types.InlineKeyboardButton(
                text="‚àí1",
                callback_data=cb("sch_manual_time", {"date": "m1"}, role=role),
            ),
            types.InlineKeyboardButton(
                text="–°–µ–≥–æ–¥–Ω—è",
                callback_data=cb("sch_manual_time", {"date": "today"}, role=role),
            ),
            types.InlineKeyboardButton(
                text="+1",
                callback_data=cb("sch_manual_time", {"date": "p1"}, role=role),
            ),
            types.InlineKeyboardButton(
                text="+2",
                callback_data=cb("sch_manual_time", {"date": "p2"}, role=role),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="üìÖ –ë—É–¥—É—â–µ–µ",
                callback_data=cb("sch_manual_time", {"date": "future"}, role=role),
            ),
        ],
    ]
    rows.append(_nav_keyboard().inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"sch_manual_date"}))
async def tui_sch_manual_date(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # consume
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–®–∞–≥ 3/7 ‚Äî –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤:"
    try:
        await cq.message.edit_text(text, reply_markup=_sch_manual_date_kb(actor.role))
    except Exception:
        await cq.message.answer(text, reply_markup=_sch_manual_date_kb(actor.role))
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_date", {})


@router.callback_query(_is("t", {"sch_manual_time"}))
async def tui_sch_manual_time(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # consume
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = (
        "–®–∞–≥ 4/7 ‚Äî –≤—Ä–µ–º—è. –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞ Dual TZ: –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ TZ –∫—É—Ä—Å–∞; –ø—Ä–∏ –æ—Ç–ª–∏—á–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π TZ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ–ø. –ø–æ–¥—Å–∫–∞–∑–∫–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )
    rows = [
        [
            types.InlineKeyboardButton(
                text="–î–∞–ª–µ–µ", callback_data=cb("sch_manual_duration", role=actor.role)
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_time", {})


@router.callback_query(_is("t", {"sch_manual_duration"}))
async def tui_sch_manual_duration(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–®–∞–≥ 5/7 ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤:"
    rows = [
        [
            types.InlineKeyboardButton(
                text="15",
                callback_data=cb("sch_manual_capacity", {"dur": 15}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="20",
                callback_data=cb("sch_manual_capacity", {"dur": 20}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="25",
                callback_data=cb("sch_manual_capacity", {"dur": 25}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="30",
                callback_data=cb("sch_manual_capacity", {"dur": 30}, role=actor.role),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="–ë–æ–ª—å—à–µ‚Ä¶",
                callback_data=cb("sch_manual_capacity", {"dur": 45}, role=actor.role),
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_duration", {})


@router.callback_query(_is("t", {"sch_manual_capacity"}))
async def tui_sch_manual_capacity(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–®–∞–≥ 6/7 ‚Äî –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤:"
    rows = [
        [
            types.InlineKeyboardButton(
                text="1",
                callback_data=cb("sch_manual_preview", {"cap": 1}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="2",
                callback_data=cb("sch_manual_preview", {"cap": 2}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="3",
                callback_data=cb("sch_manual_preview", {"cap": 3}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="10",
                callback_data=cb("sch_manual_preview", {"cap": 10}, role=actor.role),
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_capacity", {})


@router.callback_query(_is("t", {"sch_manual_preview"}))
async def tui_sch_manual_preview(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–®–∞–≥ 7/7 ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.\n" "–ó–∞–≥–ª—É—à–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
    rows = [
        [
            types.InlineKeyboardButton(
                text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=cb("stub", role=actor.role)
            ),
            types.InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data=cb("stub", role=actor.role)
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç", callback_data=cb("stub", role=actor.role)
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_preview", {})


# ------- Schedule: Apply preset -------


def _sch_preset_kb(role: str, page: int = 0) -> types.InlineKeyboardMarkup:
    # Placeholder: 5 mock presets (no DB ops here)
    presets = [f"–ü—Ä–µ—Å–µ—Ç {i + 1}" for i in range(5)]
    rows: list[list[types.InlineKeyboardButton]] = []
    for p in presets:
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=p, callback_data=cb("sch_preset_period", {"pid": p}, role=role)
                )
            ]
        )
    rows.append(_nav_keyboard().inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"sch_preset"}))
async def tui_sch_preset(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç (–¥–µ–º–æ-—Å–ø–∏—Å–æ–∫)"
    kb = _sch_preset_kb(actor.role)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_preset", {})


@router.callback_query(_is("t", {"sch_preset_period"}))
async def tui_sch_preset_period(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    rows = [
        [
            types.InlineKeyboardButton(
                text="4 –Ω–µ–¥–µ–ª–∏",
                callback_data=cb("sch_preset_preview", {"per": 4}, role=actor.role),
            ),
            types.InlineKeyboardButton(
                text="8 –Ω–µ–¥–µ–ª—å",
                callback_data=cb("sch_preset_preview", {"per": 8}, role=actor.role),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="–í—Ä—É—á–Ω—É—é",
                callback_data=cb("sch_preset_preview", {"per": 0}, role=actor.role),
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    text = "–ü–µ—Ä–∏–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞:"
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_preset_period", {})


@router.callback_query(_is("t", {"sch_preset_preview"}))
async def tui_sch_preset_preview(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–∞. –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
    rows = [
        [
            types.InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data=cb("stub", role=actor.role)
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_preset_preview", {})


# ------- Schedule: Manage -------


def _sch_manage_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(text="‚àí2", callback_data=cb("stub", role=role)),
            types.InlineKeyboardButton(text="‚àí1", callback_data=cb("stub", role=role)),
            types.InlineKeyboardButton(
                text="–°–µ–≥–æ–¥–Ω—è", callback_data=cb("stub", role=role)
            ),
            types.InlineKeyboardButton(text="+1", callback_data=cb("stub", role=role)),
            types.InlineKeyboardButton(text="+2", callback_data=cb("stub", role=role)),
        ],
        [
            types.InlineKeyboardButton(
                text="üóì –í—Å–µ —Å–ª–æ—Ç—ã", callback_data=cb("stub", role=role)
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"sch_manage"}))
async def tui_sch_manage(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –ó–∞–≥–ª—É—à–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
    try:
        await cq.message.edit_text(text, reply_markup=_sch_manage_kb(actor.role))
    except Exception:
        await cq.message.answer(text, reply_markup=_sch_manage_kb(actor.role))
    await cq.answer()
    _stack_push(_uid(cq), "sch_manage", {})


# ------- Presets -------


def _presets_root_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data=cb("presets_create", role=role)
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤",
                callback_data=cb("presets_view", {"p": 0}, role=role),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data=cb("presets_delete", role=role)
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"presets"}))
async def tui_presets(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã. –ó–∞–≥–ª—É—à–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
    try:
        await cq.message.edit_text(text, reply_markup=_presets_root_kb(actor.role))
    except Exception:
        await cq.message.answer(text, reply_markup=_presets_root_kb(actor.role))
    await cq.answer()
    _stack_push(_uid(cq), "presets", {})


def _presets_create_kb(step: int, role: str) -> types.InlineKeyboardMarkup:
    # generic Next + nav
    rows = [
        [
            types.InlineKeyboardButton(
                text="–î–∞–ª–µ–µ",
                callback_data=cb("presets_create_next", {"step": step}, role=role),
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"presets_create"}))
async def tui_presets_create(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ ‚Äî —à–∞–≥ 1/7 (–Ω–∞–∑–≤–∞–Ω–∏–µ). –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
    kb = _presets_create_kb(step=1, role=actor.role)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "presets_create", {})


@router.callback_query(_is("t", {"presets_create_next"}))
async def tui_presets_create_next(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    step = int(payload.get("step", 1)) + 1
    if step <= 6:
        text = f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ ‚Äî —à–∞–≥ {step}/7. –ó–∞–≥–ª—É—à–∫–∞."
        kb = _presets_create_kb(step=step, role=actor.role)
    else:
        text = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ó–∞–≥–ª—É—à–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=cb("stub", role=actor.role)
                    )
                ],
                _nav_keyboard().inline_keyboard[0],
            ]
        )
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()


# ------- Materials -------


def _weeks_keyboard(role: str, page: int = 0) -> types.InlineKeyboardMarkup:
    weeks = list_weeks_with_titles(limit=200)
    per_page = 8
    total_pages = max(1, (len(weeks) + per_page - 1) // per_page)
    page = max(0, min(page, total_pages - 1))
    start = page * per_page
    chunk = weeks[start : start + per_page]

    rows: list[list[types.InlineKeyboardButton]] = []
    for n, title in chunk:
        label = f"üìò –ù–µ–¥–µ–ª—è {n}"
        if title:
            label += f". {title}"
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=label,
                    callback_data=cb("materials_week", {"week": n}, role=role),
                )
            ]
        )

    if total_pages > 1:
        nav: list[types.InlineKeyboardButton] = []
        if page > 0:
            nav.append(
                types.InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data=cb("materials_page", {"page": page - 1}, role=role),
                )
            )
        if page < total_pages - 1:
            nav.append(
                types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ¬ª",
                    callback_data=cb("materials_page", {"page": page + 1}, role=role),
                )
            )
        if nav:
            rows.append(nav)
    rows.append(_nav_keyboard().inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"materials"}))
async def tui_materials(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        await cq.answer("‚õî –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return await tui_home(cq, actor)
    text = "üìö <b>–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:"
    kb = _weeks_keyboard(actor.role, page=0)
    try:
        await cq.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await cq.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await cq.answer()
    _stack_push(_uid(cq), "materials", {})


@router.callback_query(_is("t", {"materials_page"}))
async def tui_materials_page(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    page = int(payload.get("page", 0))
    try:
        await cq.message.edit_reply_markup(
            reply_markup=_weeks_keyboard(actor.role, page=page)
        )
    except Exception:
        await cq.message.answer(
            "üìö <b>–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
            reply_markup=_weeks_keyboard(actor.role, page=page),
            parse_mode="HTML",
        )
    await cq.answer()


@router.callback_query(_is("t", {"materials_week"}))
async def tui_materials_week(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week_no = int(payload.get("week", 0))
    title = _week_title(week_no)
    if title:
        text = f"üìö <b>–ù–µ–¥–µ–ª—è {week_no}. {title}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    else:
        text = f"üìö <b>–ù–µ–¥–µ–ª—è {week_no}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    kb = _materials_types_kb(week_no, actor.role)
    try:
        await cq.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await cq.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await cq.answer()
    _stack_push(_uid(cq), "materials_week", {"week": week_no})


@router.callback_query(_is("t", {"materials_send"}))
async def tui_materials_send(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week_no = int(payload.get("week", 0))
    t = payload.get("t", "p")
    wk_id = _week_id_by_no(week_no)
    if wk_id is None:
        return await cq.answer("–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    mat = get_active_material(wk_id, t)
    if not mat:
        return await cq.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)
    title = _week_title(week_no)
    labels = {
        "p": ("üìÑ", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ–¥–µ–ª–∏"),
        "m": ("üìò", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"),
        "n": ("üìö", "–ö–æ–Ω—Å–ø–µ–∫—Ç"),
        "s": ("üìä", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"),
        "v": ("üé•", "–ó–∞–ø–∏—Å—å –ª–µ–∫—Ü–∏–∏"),
    }
    emoji, name = labels.get(t, ("üìÑ", "–ú–∞—Ç–µ—Ä–∏–∞–ª"))
    if t == "v":
        try:
            msg = f"{emoji} <b>–ù–µ–¥–µ–ª—è {week_no}"
            if title:
                msg += f". {title}"
            msg += f'.</b> <a href="{mat.path}">{name}</a>'
            await cq.message.answer(
                msg,
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
        except Exception:
            return await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", show_alert=True)
        await cq.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return
    if not BufferedInputFile:
        return await cq.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)
    try:
        with open(mat.path, "rb") as f:
            data = f.read()
        fname = os.path.basename(mat.path) or f"week{week_no}_{t}.bin"
        caption = f"{emoji} <b>–ù–µ–¥–µ–ª—è {week_no}"
        if title:
            caption += f". {title}"
        caption += f".</b> {name}."
        await cq.message.answer_document(
            BufferedInputFile(data, filename=fname),
            caption=caption,
            parse_mode="HTML",
        )
    except Exception:
        return await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª", show_alert=True)
    await cq.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


# ------- Check work -------


def _checkwork_kb(role: str) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üìÖ –ü–æ –¥–∞—Ç–µ/—Å–ª–æ—Ç—É", callback_data=cb("cw_by_date", role=role)
            ),
            types.InlineKeyboardButton(
                text="üîé –ü–æ —Å—Ç—É–¥–µ–Ω—Ç—É", callback_data=cb("cw_by_student", role=role)
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("t", {"checkwork"}))
async def tui_checkwork(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º."
    try:
        await cq.message.edit_text(text, reply_markup=_checkwork_kb(actor.role))
    except Exception:
        await cq.message.answer(text, reply_markup=_checkwork_kb(actor.role))
    await cq.answer()
    _stack_push(_uid(cq), "checkwork", {})


@router.callback_query(_is("t", {"cw_by_date"}))
async def tui_cw_by_date(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    text = "–ü–æ –¥–∞—Ç–µ/—Å–ª–æ—Ç—É. –ó–∞–≥–ª—É—à–∫–∞: —Å–ø–∏—Å–æ–∫ –¥–∞—Ç/—Å–ª–æ—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
    rows = [
        [
            types.InlineKeyboardButton(
                text="–°–µ–≥–æ–¥–Ω—è", callback_data=cb("stub", role=actor.role)
            ),
            types.InlineKeyboardButton(
                text="+1", callback_data=cb("stub", role=actor.role)
            ),
            types.InlineKeyboardButton(
                text="üóì –í—Å–µ –¥–∞—Ç—ã", callback_data=cb("stub", role=actor.role)
            ),
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "cw_by_date", {})


@router.callback_query(_is("t", {"cw_by_student"}))
async def tui_cw_by_student(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    state_store.put_at(_cw_key(uid), "t_cw", {"mode": "await_surname"}, ttl_sec=600)
    text = (
        "–ü–æ —Å—Ç—É–¥–µ–Ω—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ç–µ–∫—Å—Ç–æ–º.\n"
        "–ó–∞–≥–ª—É—à–∫–∞: –ø–æ–∏—Å–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
    )
    try:
        await cq.message.edit_text(text, reply_markup=_nav_keyboard())
    except Exception:
        await cq.message.answer(text, reply_markup=_nav_keyboard())
    await cq.answer()
    _stack_push(uid, "cw_by_student", {})


def _awaits_cw_surname(m: types.Message) -> bool:
    try:
        action, st = state_store.get(_cw_key(m.from_user.id))
    except Exception:
        return False
    return action == "t_cw" and st.get("mode") == "await_surname"


@router.message(F.text, _awaits_cw_surname)
async def tui_cw_receive_surname(m: types.Message, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return
    # Consume awaiting state
    try:
        state_store.delete(_cw_key(_uid(m)))
    except Exception:
        pass
    # Show placeholder result item to proceed through flow
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –¥–µ–º–æ-—Å—Ç—É–¥–µ–Ω—Ç–∞",
                    callback_data=cb("stub", role=actor.role),
                )
            ],
            _nav_keyboard().inline_keyboard[0],
        ]
    )
    await m.answer("–ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=kb)


# ------- Generic stub handler -------


@router.callback_query(_is("t", {"stub"}))
async def tui_stub_action(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # consume
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    await cq.answer("‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)


@router.callback_query(_is("t", {"sch_manual_place"}))
async def tui_sch_manual_place(cq: types.CallbackQuery, actor: Identity):
    if actor.role not in ("teacher", "owner"):
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    mode = (payload.get("mode") or "online").strip()
    try:
        state_store.put_at(
            f"t_manual_ctx:{_uid(cq)}", "t_manual", {"mode": mode}, ttl_sec=900
        )
    except Exception:
        pass
    is_online = mode == "online"
    if is_online:
        text = (
            "–®–∞–≥ 2/7 ‚Äî –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–æ–Ω–ª–∞–π–Ω).\n"
            "–ó–∞–≥–ª—É—à–∫–∞: –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
        )
    else:
        text = (
            "–®–∞–≥ 2/7 ‚Äî –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–æ—á–Ω–æ).\n"
            "–ó–∞–≥–ª—É—à–∫–∞: –≤–≤–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."
        )
    rows = [
        [
            types.InlineKeyboardButton(
                text="–î–∞–ª–µ–µ",
                callback_data=cb("sch_manual_date", {"mode": mode}, role=actor.role),
            )
        ],
        _nav_keyboard().inline_keyboard[0],
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cq.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cq.message.answer(text, reply_markup=kb)
    await cq.answer()
    _stack_push(_uid(cq), "sch_manual_place", {"mode": mode})
