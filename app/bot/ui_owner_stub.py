from __future__ import annotations

from aiogram.filters import Command, CommandStart

from aiogram import F, Router, types
from app.core import callbacks, state_store
from app.core.auth import Identity, get_user_by_tg
from app.core.backup import backup_recent, trigger_backup
from app.core.course_init import apply_course_init, parse_weeks_csv
from app.core.imports_epic5 import (
    E_DUPLICATE_USER,
    STUDENT_HEADERS,
    TEACHER_HEADERS,
    get_templates,
    get_users_summary,
    import_students_csv,
    import_teachers_csv,
)
from app.db.conn import db

router = Router(name="ui.owner.stub")


def _uid(x: types.Message | types.CallbackQuery) -> int:
    return x.from_user.id


def _imp_key(uid: int) -> str:
    return f"impersonate:{uid}"


def _nav_key(uid: int) -> str:
    return f"own_nav:{uid}"


def _now() -> int:
    return state_store.now()


def cb(action: str, params: dict | None = None) -> str:
    payload = {"action": action}
    if params:
        payload.update(params)
    return callbacks.build("own", payload, role="owner")


def _get_impersonation(uid: int) -> dict | None:
    try:
        _, payload = state_store.get(_imp_key(uid))
        return payload
    except Exception:
        return None


def _nav_keyboard(section: str = "root") -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=cb("back"),
                ),
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data=cb("home"),
                ),
            ]
        ]
    )


def _main_menu_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º",
                    callback_data=cb("course"),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üë• –õ—é–¥–∏ –∏ —Ä–æ–ª–∏",
                    callback_data=cb("people"),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞",
                    callback_data=cb("materials"),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üóÑÔ∏è –ê—Ä—Ö–∏–≤",
                    callback_data=cb("archive"),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìä –û—Ç—á—ë—Ç—ã –∏ –∞—É–¥–∏—Ç",
                    callback_data=cb("reports"),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üë§ –ò–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏—è",
                    callback_data=cb("impersonation"),
                )
            ],
        ]
    )


async def _maybe_banner(uid: int) -> str:
    imp = _get_impersonation(uid)
    if not imp:
        return ""
    name = imp.get("name") or imp.get("tg_id")
    role = imp.get("role")
    exp = imp.get("exp")
    left = 0
    if isinstance(exp, int):
        left = max(0, (exp - _now() + 59) // 60)
    who = name or role
    return f"–í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ {who}, –æ—Å—Ç–∞–ª–æ—Å—å: {left} –º–∏–Ω\n"


def _stack_get(uid: int) -> list[dict]:
    try:
        action, st = state_store.get(_nav_key(uid))
        if action != "own_nav":
            return []
        return st.get("stack") or []
    except Exception:
        return []


def _stack_set(uid: int, stack: list[dict]) -> None:
    state_store.put_at(_nav_key(uid), "own_nav", {"stack": stack}, ttl_sec=1800)


def _stack_push(uid: int, screen: str, params: dict | None = None) -> None:
    st = _stack_get(uid)
    st.append({"s": screen, "p": params or {}})
    _stack_set(uid, st)


def _stack_pop(uid: int) -> dict | None:
    st = _stack_get(uid)
    if not st:
        return None
    st.pop()
    _stack_set(uid, st)
    return st[-1] if st else None


def _stack_reset(uid: int) -> None:
    _stack_set(uid, [{"s": "home", "p": {}}])


def _ci_key(uid: int) -> str:
    return f"own_ci:{uid}"


def _people_imp_key(uid: int) -> str:
    return f"own_imp:{uid}"


def _people_imp_ck(uid: int, kind: str) -> str:
    return f"own_imp_ck:{uid}:{kind}"


def _csv_filter_excess_columns(
    content: bytes, expected_headers: list[str]
) -> tuple[bytes, int, bool]:
    """
    Returns (filtered_csv_bytes, dropped_rows_count, headers_ok).
    - If headers don't match expected_headers, returns original content with 0 drops and headers_ok=False
    - Otherwise, drops data rows that have more columns than expected, keeping rows with <= expected.
    """
    import csv
    import io

    try:
        text = content.decode("utf-8-sig")
    except UnicodeDecodeError:
        text = content.decode("utf-8", errors="replace")
    reader = csv.reader(io.StringIO(text))
    try:
        headers = next(reader)
    except StopIteration:
        return content, 0, False
    if headers != expected_headers:
        return content, 0, False
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(headers)
    dropped = 0
    for row in reader:
        if len(row) > len(expected_headers):
            dropped += 1
            continue
        # pad short rows to expected length
        if len(row) < len(expected_headers):
            row = row + [""] * (len(expected_headers) - len(row))
        w.writerow(row)
    return buf.getvalue().encode("utf-8"), dropped, True


@router.message(Command("owner"))
async def owner_menu_cmd(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return await m.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    uid = _uid(m)
    _stack_reset(uid)
    banner = await _maybe_banner(uid)
    await m.answer(banner + "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu_kb())


@router.message(Command("owner_menu"))
async def owner_menu_alt_cmd(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return await m.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    uid = _uid(m)
    _stack_reset(uid)
    banner = await _maybe_banner(uid)
    await m.answer(banner + "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu_kb())


@router.message(CommandStart())
async def owner_menu_on_start(m: types.Message, actor: Identity):
    # If already registered owner ‚Üí show main menu automatically
    if actor.role != "owner":
        return
    uid = _uid(m)
    _stack_reset(uid)
    banner = await _maybe_banner(uid)
    await m.answer(banner + "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu_kb())


def _is(op: str, actions: set[str]):
    def _f(cq: types.CallbackQuery) -> bool:
        try:
            op2, key = callbacks.parse(cq.data)
            if op2 != op:
                return False
            _, payload = state_store.get(key)
            return payload.get("action") in actions
        except Exception:
            return False

    return _f


@router.callback_query(_is("own", {"home"}))
async def ownui_home(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # destroy-on-read (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è params) ‚Äî –≥–∞—Å–∏–º —Ç–æ–∫–µ–Ω
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    _stack_reset(uid)
    banner = await _maybe_banner(uid)
    try:
        await cq.message.edit_text(
            banner + "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu_kb()
        )
    except Exception:
        await cq.message.answer(banner + "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=_main_menu_kb())
    await cq.answer()


@router.callback_query(_is("own", {"back"}))
async def ownui_back(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    uid = _uid(cq)
    prev = _stack_pop(uid)
    if not prev:
        return await ownui_home(cq, actor)
    screen = prev.get("s")
    params = prev.get("p") or {}
    if screen == "course":
        return await ownui_course(cq, actor)
    if screen == "people":
        return await ownui_people(cq, actor)
    if screen == "materials":
        return await ownui_materials(cq, actor)
    if screen == "materials_week":
        cq.data = cb("materials_week", {"week": params.get("week", 1)})
        return await ownui_materials_week(cq, actor)
    if screen == "archive":
        return await ownui_archive(cq, actor)
    if screen == "arch_materials_weeks":
        return await ownui_arch_materials(cq, actor)
    if screen == "arch_materials_versions":
        cq.data = cb("arch_materials_versions", {"week": params.get("week", 1)})
        return await ownui_arch_materials_versions(cq, actor)
    if screen == "arch_works_surname":
        return await ownui_arch_works(cq, actor)
    if screen == "arch_works_weeks":
        cq.data = cb("arch_works_weeks", {"surname": params.get("surname", "")})
        return await ownui_arch_works_weeks(cq, actor)
    if screen == "reports":
        return await ownui_reports(cq, actor)
    if screen == "imp":
        return await ownui_impersonation(cq, actor)
    if screen == "people_search":
        return await ownui_people_search_start(cq, actor)
    if screen == "ps_teachers":
        cq.data = cb("ps_t_list", {"p": params.get("page", 0)})
        return await ownui_ps_t_list(cq, actor)
    if screen == "ps_students_groups":
        cq.data = cb("ps_s_groups", {"p": params.get("page", 0)})
        return await ownui_ps_s_groups(cq, actor)
    if screen == "ps_students_names":
        cq.data = cb(
            "ps_s_names",
            {"g": params.get("g", ""), "p": params.get("page", 0)},
        )
        return await ownui_ps_s_names(cq, actor)
    return await ownui_home(cq, actor)


# -------- Course management --------


def _course_kb(disabled: bool) -> types.InlineKeyboardMarkup:
    init_btn = types.InlineKeyboardButton(
        text=("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞" + (" üîí" if disabled else "")),
        callback_data=cb("course_init"),
    )
    info_btn = types.InlineKeyboardButton(
        text="–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è",
        callback_data=cb("course_info"),
    )
    rows = [
        [init_btn],
        [info_btn],
    ]
    rows.append(_nav_keyboard("course").inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("own", {"course"}))
async def ownui_course(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    imp = _get_impersonation(_uid(cq))
    disabled = bool(imp)
    header = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º"
    if disabled:
        header += "\n(–ß–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏)"
    try:
        await cq.message.edit_text(header, reply_markup=_course_kb(disabled))
    except Exception:
        await cq.message.answer(header, reply_markup=_course_kb(disabled))
    await cq.answer()
    _stack_push(_uid(cq), "course", {})


def _fmt_deadline_utc(ts: int | None) -> tuple[str, str]:
    from datetime import datetime, timezone

    if not ts:
        # –í —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞ (üü¢/üî¥).
        # –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ ‚Äî –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞.
        return ("–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", "")
    # –î–ª—è –æ–±—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–æ–Ω—ã)
    dlt = datetime.fromtimestamp(int(ts), timezone.utc).strftime("%Y-%m-%d")
    indicator = "üü¢" if ts >= _now() else "üî¥"
    return (f"<b>–¥–µ–¥–ª–∞–π–Ω {dlt}</b>", indicator)


def _course_info_build(page: int = 0, per_page: int = 8) -> tuple[str, int, int]:
    # Returns (text, page, total_pages)
    with db() as conn:
        # course name (optional table)
        try:
            row = conn.execute("SELECT name FROM course WHERE id=1").fetchone()
            c_name = row[0] if row and row[0] else "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        except Exception:
            c_name = "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        total = conn.execute("SELECT COUNT(1) FROM weeks").fetchone()[0]
        total_pages = max(1, (total + per_page - 1) // per_page)
        page = max(0, min(page, total_pages - 1))
        offset = page * per_page
        rows = conn.execute(
            "SELECT week_no, COALESCE(topic, title), deadline_ts_utc FROM weeks ORDER BY week_no ASC LIMIT ? OFFSET ?",
            (per_page, offset),
        ).fetchall()
    lines = [
        "üìò <b>–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ</b>",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {c_name}",
        "",
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ (—Å—Ç—Ä. {page + 1}/{total_pages})",
    ]
    for wno, topic, dl in rows:
        tp = topic or ""
        # –í –æ–±—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ W-–ø—Ä–µ—Ñ–∏–∫—Å–∞)
        tag = f"{int(wno)}"
        dl_text, ind = _fmt_deadline_utc(dl)
        lines.append(f"‚Ä¢ <b>–ù–µ–¥–µ–ª—è {tag}</b> ‚Äî {tp} ‚Äî {dl_text} {ind}")
    if not rows:
        lines.append("‚Ä¢ (–Ω–µ—Ç –Ω–µ–¥–µ–ª—å)")
    return "\n".join(lines), page, total_pages


def _course_info_kb(page: int, total_pages: int) -> types.InlineKeyboardMarkup:
    nav: list[types.InlineKeyboardButton] = []
    if page > 0:
        nav.append(
            types.InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=cb("course_info_page", {"page": page - 1}),
            )
        )
    if page < total_pages - 1:
        nav.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ¬ª",
                callback_data=cb("course_info_page", {"page": page + 1}),
            )
        )
    rows: list[list[types.InlineKeyboardButton]] = []
    if nav:
        rows.append(nav)
    rows.append(_nav_keyboard("course").inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("own", {"course_info"}))
async def ownui_course_info(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # consume token
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    banner = await _maybe_banner(_uid(cq))
    text, page, total = _course_info_build(page=0)
    try:
        await cq.message.edit_text(
            banner + text, reply_markup=_course_info_kb(page, total), parse_mode="HTML"
        )
    except Exception:
        await cq.message.answer(
            banner + text, reply_markup=_course_info_kb(page, total)
        )
    await cq.answer()


@router.callback_query(_is("own", {"course_info_page"}))
async def ownui_course_info_page(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    p = int(payload.get("page", 0))
    banner = await _maybe_banner(_uid(cq))
    text, page, total = _course_info_build(page=p)
    try:
        await cq.message.edit_text(
            banner + text, reply_markup=_course_info_kb(page, total), parse_mode="HTML"
        )
    except Exception:
        await cq.message.answer(
            banner + text, reply_markup=_course_info_kb(page, total)
        )
    await cq.answer()


@router.callback_query(_is("own", {"course_init"}))
async def ownui_course_init(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    if _get_impersonation(_uid(cq)):
        return await cq.answer("‚õî –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)
    # Simulate multi-step: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí weeks.csv ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí –ì–æ—Ç–æ–≤–æ
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    # Prepare course-init state
    state_store.put_at(_ci_key(uid), "course_init", {"mode": "params"}, ttl_sec=1800)
    await cq.message.answer(
        banner + "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞ ‚Äî —à–∞–≥ 1/3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–î–∞–ª–µ–µ",
                        callback_data=cb("course_init_2"),
                    )
                ],
                _nav_keyboard("course").inline_keyboard[0],
            ]
        ),
    )
    await cq.answer()


@router.callback_query(_is("own", {"course_init_2"}))
async def ownui_course_init_2(cq: types.CallbackQuery, actor: Identity):
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    # Ensure course name is set
    with db() as conn:
        row = conn.execute("SELECT name FROM course WHERE id=1").fetchone()
        cname = row["name"] if row else None
    if not cname or not str(cname).strip():
        await cq.message.answer(
            banner + "‚õî –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
            reply_markup=_nav_keyboard("course"),
        )
        return await cq.answer()
    state_store.put_at(_ci_key(uid), "course_init", {"mode": "await_csv"}, ttl_sec=1800)
    await cq.message.answer(
        banner
        + "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞ ‚Äî —à–∞–≥ 2/3: –ó–∞–≥—Ä—É–∑–∏—Ç–µ weeks.csv. –§–æ—Ä–º–∞—Ç: week_id,topic,description,deadline",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–î–∞–ª–µ–µ",
                        callback_data=cb("course_init_3"),
                    )
                ],
                _nav_keyboard("course").inline_keyboard[0],
            ]
        ),
    )
    await cq.answer()


def _awaits_ci_params(m: types.Message) -> bool:
    try:
        action, st = state_store.get(_ci_key(m.from_user.id))
    except Exception:
        return False
    return action == "course_init" and (st or {}).get("mode") == "params"


@router.message(F.text, _awaits_ci_params)
async def ownui_course_init_receive_name(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return
    name = (m.text or "").strip()
    if not name:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    now = state_store.now()
    with db() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO course(id, name, created_at_utc, updated_at_utc) VALUES(1, ?, ?, ?)",
            (name, now, now),
        )
        conn.execute(
            "UPDATE course SET name=?, updated_at_utc=? WHERE id=1",
            (name, now),
        )
        conn.commit()
    # advance mode to saved
    uid = _uid(m)
    state_store.put_at(
        _ci_key(uid), "course_init", {"mode": "params_saved"}, ttl_sec=1800
    )
    await m.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {name}\n–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.")


def _awaits_ci_csv(m: types.Message) -> bool:
    try:
        action, st = state_store.get(_ci_key(m.from_user.id))
    except Exception:
        return False
    return action == "course_init" and (st or {}).get("mode") == "await_csv"


@router.message(F.document, _awaits_ci_csv)
async def ownui_course_init_receive_csv(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return
    uid = _uid(m)
    try:
        st_action, st = state_store.get(_ci_key(uid))
    except Exception:
        return
    if st_action != "course_init" or st.get("mode") != "await_csv":
        return
    doc = m.document
    file = await m.bot.get_file(doc.file_id)
    b = await m.bot.download_file(file.file_path)
    content = b.read()
    parsed = parse_weeks_csv(content)
    if parsed.errors:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏/—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Ä–µ–µ—Å—Ç—Ä–æ–º: E_IMPORT_FORMAT)
        if any(e == "E_IMPORT_FORMAT" for e in parsed.errors):
            await m.answer("‚õî –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CSV (–ª–∏—à–Ω–∏–µ/–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)")
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω (–∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞)
        elif any(":E_IMPORT_FORMAT" in e and "deadline" in e for e in parsed.errors):
            await m.answer("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞")
        elif any("E_WEEK_DUPLICATE" in e for e in parsed.errors):
            await m.answer("‚õî –î—É–±–ª–∏–∫–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ–¥–µ–ª—å (week_id)")
        elif any("E_WEEK_SEQUENCE_GAP" in e for e in parsed.errors):
            await m.answer(
                "‚õî –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å week_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –Ω–∞—á–∏–Ω–∞—è —Å 1"
            )
        else:
            await m.answer("‚õî –û—à–∏–±–∫–∞ CSV")
        state_store.put_at(
            _ci_key(uid), "course_init", {"mode": "await_csv"}, ttl_sec=1800
        )
        return
    rows = [
        {
            "week_no": r.week_no,
            "topic": r.topic,
            "description": r.description,
            "deadline_ts_utc": r.deadline_ts_utc,
        }
        for r in parsed.rows
    ]
    state_store.put_at(
        _ci_key(uid), "course_init", {"mode": "csv_ready", "rows": rows}, ttl_sec=1800
    )
    await m.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é (—à–∞–≥ 3/3).")


@router.callback_query(_is("own", {"course_init_3"}))
async def ownui_course_init_3(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    try:
        _, st = state_store.get(_ci_key(uid))
    except Exception:
        st = {}
    rows = (st or {}).get("rows") or []
    if not rows:
        await cq.message.answer(
            banner + "‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π weeks.csv.",
            reply_markup=_nav_keyboard("course"),
        )
        return await cq.answer()
    preview_lines = ["–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–µ–ª—å:"]
    for r in rows[:10]:
        wn = r.get("week_no")
        tp = r.get("topic") or ""
        dl = r.get("deadline_ts_utc")
        if dl:
            from datetime import datetime, timezone

            dlt = datetime.fromtimestamp(int(dl), timezone.utc).strftime(
                "%Y-%m-%d %H:%M UTC"
            )
            preview_lines.append(f"‚Äì W{wn}: {tp} ‚Äî –¥–µ–¥–ª–∞–π–Ω {dlt}")
        else:
            preview_lines.append(f"‚Äì W{wn}: {tp}")
    if len(rows) > 10:
        preview_lines.append(f"‚Ä¶ –∏ –µ—â—ë {len(rows) - 10}")
    await cq.message.answer(
        banner
        + "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞ ‚Äî —à–∞–≥ 3/3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
        + "\n".join(preview_lines),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=cb("course_init_done"),
                    )
                ],
                _nav_keyboard("course").inline_keyboard[0],
            ]
        ),
    )
    await cq.answer()


@router.callback_query(_is("own", {"course_init_done"}))
async def ownui_course_init_done(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    try:
        _, st = state_store.get(_ci_key(uid))
    except Exception:
        st = {}
    rows = (st or {}).get("rows") or []
    if not rows:
        await cq.message.answer(
            banner + "‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ weeks.csv.",
            reply_markup=_nav_keyboard("course"),
        )
        return await cq.answer()
    # Enforce backup freshness per L3
    if not backup_recent():
        await cq.message.answer(
            banner + "‚õî E_BACKUP_STALE ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–π –±—ç–∫–∞–ø",
            reply_markup=_nav_keyboard("course"),
        )
        return await cq.answer()
    # Apply
    try:
        parsed = [
            # reconstruct WeekRow dicts; fields set in ownui_course_init_receive_csv
            # week_no, topic, description, deadline_ts_utc
            __import__("builtins").dict(**r)
            for r in rows  # type: ignore
        ]
        # Minimal safe apply
        from app.core.course_init import WeekRow as _WR

        apply_course_init([_WR(**r) for r in parsed])
        msg = "–ì–æ—Ç–æ–≤–æ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    except Exception:
        msg = "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"
    try:
        state_store.delete(_ci_key(uid))
    except Exception:
        pass
    await cq.message.answer(banner + msg, reply_markup=_nav_keyboard("course"))
    await cq.answer()


# -------- People and roles --------


def _people_kb(impersonating: bool = False) -> types.InlineKeyboardMarkup:
    lock = " üîí" if impersonating else ""
    rows = [
        [
            types.InlineKeyboardButton(
                text=f"–ò–º–ø–æ—Ä—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (CSV){lock}",
                callback_data=cb("people_imp_students"),
            ),
            types.InlineKeyboardButton(
                text=f"–ò–º–ø–æ—Ä—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (CSV){lock}",
                callback_data=cb("people_imp_teachers"),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è",
                callback_data=cb("people_search"),
            )
        ],
        [
            types.InlineKeyboardButton(
                text=f"–°–æ–∑–¥–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π{lock}",
                callback_data=cb("people_matrix"),
            )
        ],
        _nav_keyboard("people").inline_keyboard,
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=[*rows[:-1], rows[-1][0]])


@router.callback_query(_is("own", {"people"}))
async def ownui_people(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    imp = bool(_get_impersonation(uid))
    await cq.message.answer(
        banner + "üë• –õ—é–¥–∏ –∏ —Ä–æ–ª–∏", reply_markup=_people_kb(impersonating=imp)
    )
    await cq.answer()
    _stack_push(_uid(cq), "people", {})


@router.callback_query(
    _is(
        "own",
        {
            "people_matrix",
        },
    )
)
async def ownui_people_stubs(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    act = payload.get("action")
    if act == "people_matrix" and _get_impersonation(_uid(cq)):
        return await cq.answer(
            "‚õî –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True
        )
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", reply_markup=_nav_keyboard("people")
    )
    await cq.answer()


# -------- People search --------


def _ps_key(uid: int) -> str:
    return f"own_ps:{uid}"


@router.callback_query(_is("own", {"people_search"}))
async def ownui_people_search_start(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏",
                    callback_data=cb("ps_t_list", {"p": 0}),
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–°—Ç—É–¥–µ–Ω—Ç—ã",
                    callback_data=cb("ps_s_groups", {"p": 0}),
                )
            ],
            _nav_keyboard("people").inline_keyboard[0],
        ]
    )
    try:
        await cq.message.edit_text(
            banner + "–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb
        )
    except Exception:
        await cq.message.answer(
            banner + "–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb
        )
    await cq.answer()


def _awaits_ps_query(m: types.Message) -> bool:
    try:
        action, st = state_store.get(_ps_key(m.from_user.id))
    except Exception:
        return False
    return action == "people_search" and (st or {}).get("mode") == "await_query"


@router.message(F.text, _awaits_ps_query)
async def ownui_people_search_query(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return
    q = (m.text or "").strip()
    if not q:
        return await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å–∏–º–≤–æ–ª")
    uid = _uid(m)
    # store last query (optional)
    try:
        state_store.put_at(
            _ps_key(uid), "people_search", {"mode": "query_entered"}, ttl_sec=900
        )
    except Exception:
        pass
    like = q.lower() + "%"
    rows: list[dict] = []
    with db() as conn:
        cur = conn.execute(
            (
                "SELECT id, role, name, COALESCE(email,''), COALESCE(group_name,''), tef, capacity, tg_id "
                "FROM users WHERE LOWER(COALESCE(name,'')) LIKE ? OR LOWER(COALESCE(email,'')) LIKE ? "
                "ORDER BY role, name LIMIT 20"
            ),
            (like, like),
        )
        for r in cur.fetchall():
            rows.append(
                {
                    "id": str(r[0]),
                    "role": r[1] or "",
                    "name": r[2] or "",
                    "email": r[3] or "",
                    "group_name": r[4] or "",
                    "tef": r[5],
                    "capacity": r[6],
                    "tg_id": r[7],
                }
            )
    if not rows:
        return await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=_nav_keyboard("people"))
    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for r in rows:
        extra = ""
        if r["role"] == "student" and r["group_name"]:
            extra = f" ‚Äî {r['group_name']}"
        if r["role"] == "teacher" and r["capacity"] is not None:
            extra = f" ‚Äî cap {r['capacity']}"
        kb_rows.append(
            [
                types.InlineKeyboardButton(
                    text=f"{r['name']} ({r['role']}){extra}",
                    callback_data=cb("people_profile", {"uid": r["id"]}),
                )
            ]
        )
    kb_rows.append(_nav_keyboard("people").inline_keyboard[0])
    await m.answer(
        "–ù–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb_rows),
    )


@router.callback_query(_is("own", {"people_profile"}))
async def ownui_people_profile(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    uid_param = str(payload.get("uid", ""))
    if not uid_param:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
    row = None
    with db() as conn:
        row = conn.execute(
            (
                "SELECT id, role, name, email, group_name, tef, capacity, tg_id, is_active "
                "FROM users WHERE id=? LIMIT 1"
            ),
            (uid_param,),
        ).fetchone()
    if not row:
        return await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    role = row[1] or ""
    name = row[2] or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
    email = row[3] or "‚Äî"
    group_name = row[4] or ""
    capacity = row[6]
    tg_bound = bool(row[7])
    active = int(row[8] or 0) == 1
    role_emoji = (
        "üëë"
        if role == "owner"
        else ("üë®‚Äçüè´" if role == "teacher" else ("üéì" if role == "student" else "üë§"))
    )
    status_emoji = "üü¢" if active else "‚ö™Ô∏è"
    tg_emoji = "üü¢" if tg_bound else "‚ö™Ô∏è"
    lines = [
        f"<b>{name}</b>",
        f"<b>–†–æ–ª—å:</b> {role_emoji} {role}",
        f"<b>Email:</b> {email}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–∞–∫—Ç–∏–≤–µ–Ω' if active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
    ]
    if role == "student":
        lines.append(f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name or '‚Äî'}")
    if role == "teacher":
        lines.append(
            f"<b>–ú–∞–∫—Å–∏–º—É–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> {capacity if capacity is not None else '‚Äî'}"
        )
    lines.append(f"<b>TG:</b> {tg_emoji} {'–ø—Ä–∏–≤—è–∑–∞–Ω' if tg_bound else '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}")
    banner = await _maybe_banner(_uid(cq))
    toggle_txt = "–°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º" if active else "–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=toggle_txt,
                    callback_data=cb("ps_toggle_active", {"uid": uid_param}),
                )
            ],
            _nav_keyboard("people").inline_keyboard[0],
        ]
    )
    try:
        await cq.message.edit_text(
            banner + "\n".join(lines), reply_markup=kb, parse_mode="HTML"
        )
    except Exception:
        await cq.message.answer(
            banner + "\n".join(lines), reply_markup=kb, parse_mode="HTML"
        )
    await cq.answer()


@router.callback_query(_is("own", {"ps_toggle_active"}))
async def ownui_people_toggle_active(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    if _get_impersonation(_uid(cq)):
        return await cq.answer("‚õî –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    uid_param = str(payload.get("uid", ""))
    if not uid_param:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
    with db() as conn:
        row = conn.execute(
            "SELECT role, name, email, group_name, tef, capacity, tg_id, is_active FROM users WHERE id=? LIMIT 1",
            (uid_param,),
        ).fetchone()
        if not row:
            return await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        cur = int(row[7] or 0)
        new_val = 0 if cur == 1 else 1
        conn.execute(
            "UPDATE users SET is_active=?, updated_at_utc=strftime('%s','now') WHERE id=?",
            (new_val, uid_param),
        )
        conn.commit()
        # Fetch updated row
        row = conn.execute(
            "SELECT role, name, email, group_name, tef, capacity, tg_id, is_active FROM users WHERE id=? LIMIT 1",
            (uid_param,),
        ).fetchone()
    # Rebuild card (same format as ownui_people_profile)
    role = row[0] or ""
    name = row[1] or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
    email = row[2] or "‚Äî"
    group_name = row[3] or ""
    capacity = row[5]
    tg_bound = bool(row[6])
    active = int(row[7] or 0) == 1
    role_emoji = (
        "üëë"
        if role == "owner"
        else ("üë®‚Äçüè´" if role == "teacher" else ("üéì" if role == "student" else "üë§"))
    )
    status_emoji = "üü¢" if active else "‚ö™Ô∏è"
    tg_emoji = "üü¢" if tg_bound else "‚ö™Ô∏è"
    lines = [
        f"<b>{name}</b>",
        f"<b>–†–æ–ª—å:</b> {role_emoji} {role}",
        f"<b>Email:</b> {email}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–∞–∫—Ç–∏–≤–µ–Ω' if active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
    ]
    if role == "student":
        lines.append(f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name or '‚Äî'}")
    if role == "teacher":
        lines.append(
            f"<b>–ú–∞–∫—Å–∏–º—É–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> {capacity if capacity is not None else '‚Äî'}"
        )
    lines.append(f"<b>TG:</b> {tg_emoji} {'–ø—Ä–∏–≤—è–∑–∞–Ω' if tg_bound else '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}")
    toggle_txt = "–°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º" if active else "–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=toggle_txt,
                    callback_data=cb("ps_toggle_active", {"uid": uid_param}),
                )
            ],
            _nav_keyboard("people").inline_keyboard[0],
        ]
    )
    banner = await _maybe_banner(_uid(cq))
    try:
        await cq.message.edit_text(
            banner + "\n".join(lines), reply_markup=kb, parse_mode="HTML"
        )
    except Exception:
        await cq.message.answer(
            banner + "\n".join(lines), reply_markup=kb, parse_mode="HTML"
        )
    return await cq.answer()


@router.callback_query(_is("own", {"ps_t_list"}))
async def ownui_ps_t_list(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    page = int(payload.get("p", 0))
    per_page = 10
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    with db() as conn:
        total = conn.execute(
            "SELECT COUNT(1) FROM users WHERE role='teacher'"
        ).fetchone()[0]
        total_pages = max(1, (int(total) + per_page - 1) // per_page)
        page = max(0, min(page, total_pages - 1))
        offset = page * per_page
        rows = conn.execute(
            (
                "SELECT id, name, capacity FROM users WHERE role='teacher' "
                "ORDER BY COALESCE(name,'') ASC LIMIT ? OFFSET ?"
            ),
            (per_page, offset),
        ).fetchall()
    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for r in rows:
        tid = str(r[0])
        name = r[1] or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
        cap = r[2]
        cap_txt = f" ‚Äî cap {cap}" if cap is not None else ""
        kb_rows.append(
            [
                types.InlineKeyboardButton(
                    text=f"{name}{cap_txt}",
                    callback_data=cb("people_profile", {"uid": tid}),
                )
            ]
        )
    pager = []
    if page > 0:
        pager.append(
            types.InlineKeyboardButton(
                text="‚óÄ", callback_data=cb("ps_t_list", {"p": page - 1})
            )
        )
    pager.append(
        types.InlineKeyboardButton(
            text=f"{page + 1}/{max(1, total_pages)}", callback_data=cb("noop")
        )
    )
    if page < total_pages - 1:
        pager.append(
            types.InlineKeyboardButton(
                text="‚ñ∂", callback_data=cb("ps_t_list", {"p": page + 1})
            )
        )
    kb_rows.append(pager)
    kb_rows.append(_nav_keyboard("people").inline_keyboard[0])
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    try:
        await cq.message.edit_text(banner + "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)
    except Exception:
        await cq.message.answer(banner + "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)
    _stack_push(uid, "ps_teachers", {"page": page})
    await cq.answer()


@router.callback_query(_is("own", {"ps_s_groups"}))
async def ownui_ps_s_groups(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    page = int(payload.get("p", 0))
    per_page = 10
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    with db() as conn:
        groups = [
            r[0]
            for r in conn.execute(
                (
                    "SELECT DISTINCT group_name FROM users WHERE role='student' AND COALESCE(group_name,'')<>'' "
                    "ORDER BY group_name ASC"
                )
            ).fetchall()
        ]
    total = len(groups)
    total_pages = max(1, (total + per_page - 1) // per_page)
    page = max(0, min(page, total_pages - 1))
    start = page * per_page
    chunk = groups[start : start + per_page]
    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for g in chunk:
        kb_rows.append(
            [
                types.InlineKeyboardButton(
                    text=g,
                    callback_data=cb("ps_s_names", {"g": g, "p": 0}),
                )
            ]
        )
    pager = []
    if page > 0:
        pager.append(
            types.InlineKeyboardButton(
                text="‚óÄ", callback_data=cb("ps_s_groups", {"p": page - 1})
            )
        )
    pager.append(
        types.InlineKeyboardButton(
            text=f"{page + 1}/{max(1, total_pages)}", callback_data=cb("noop")
        )
    )
    if page < total_pages - 1:
        pager.append(
            types.InlineKeyboardButton(
                text="‚ñ∂", callback_data=cb("ps_s_groups", {"p": page + 1})
            )
        )
    kb_rows.append(pager)
    kb_rows.append(_nav_keyboard("people").inline_keyboard[0])
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    try:
        await cq.message.edit_text(banner + "–ì—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", reply_markup=kb)
    except Exception:
        await cq.message.answer(banner + "–ì—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", reply_markup=kb)
    _stack_push(uid, "ps_students_groups", {"page": page})
    await cq.answer()


@router.callback_query(_is("own", {"ps_s_names"}))
async def ownui_ps_s_names(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    group = payload.get("g") or ""
    page = int(payload.get("p", 0))
    per_page = 10
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    with db() as conn:
        total = conn.execute(
            "SELECT COUNT(1) FROM users WHERE role='student' AND COALESCE(group_name,'')=?",
            (group,),
        ).fetchone()[0]
        total_pages = max(1, (int(total) + per_page - 1) // per_page)
        page = max(0, min(page, total_pages - 1))
        offset = page * per_page
        rows = conn.execute(
            (
                "SELECT id, name FROM users WHERE role='student' AND COALESCE(group_name,'')=? "
                "ORDER BY COALESCE(name,'') ASC LIMIT ? OFFSET ?"
            ),
            (group, per_page, offset),
        ).fetchall()
    kb_rows: list[list[types.InlineKeyboardButton]] = []
    for r in rows:
        sid = str(r[0])
        name = r[1] or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
        kb_rows.append(
            [
                types.InlineKeyboardButton(
                    text=name,
                    callback_data=cb("people_profile", {"uid": sid}),
                )
            ]
        )
    pager = []
    if page > 0:
        pager.append(
            types.InlineKeyboardButton(
                text="‚óÄ", callback_data=cb("ps_s_names", {"g": group, "p": page - 1})
            )
        )
    pager.append(
        types.InlineKeyboardButton(
            text=f"{page + 1}/{max(1, total_pages)}", callback_data=cb("noop")
        )
    )
    if page < total_pages - 1:
        pager.append(
            types.InlineKeyboardButton(
                text="‚ñ∂", callback_data=cb("ps_s_names", {"g": group, "p": page + 1})
            )
        )
    kb_rows.append(pager)
    kb_rows.append(_nav_keyboard("people").inline_keyboard[0])
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    header = f"–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:"
    try:
        await cq.message.edit_text(banner + header, reply_markup=kb)
    except Exception:
        await cq.message.answer(banner + header, reply_markup=kb)
    _stack_push(uid, "ps_students_names", {"g": group, "page": page})
    await cq.answer()


# Import: People (students/teachers)


def _awaits_imp(m: types.Message, kind: str) -> bool:
    try:
        action, st = state_store.get(_people_imp_key(m.from_user.id))
    except Exception:
        return False
    return action == kind and (st or {}).get("mode") == "await_csv"


@router.callback_query(_is("own", {"people_imp_students"}))
async def ownui_people_imp_students(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    if _get_impersonation(_uid(cq)):
        return await cq.answer(
            "‚õî –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True
        )
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    state_store.put_at(
        _people_imp_key(uid), "imp_students", {"mode": "await_csv"}, ttl_sec=1800
    )
    text = (
        "–ò–º–ø–æ—Ä—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª students.csv.\n"
        "–§–æ—Ä–º–∞—Ç: surname,name,patronymic,email,group_name"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=cb("people_tpl", {"t": "students"}),
                )
            ],
            _nav_keyboard("people").inline_keyboard[0],
        ]
    )
    try:
        await cq.message.edit_text(banner + text, reply_markup=kb)
    except Exception:
        await cq.message.answer(banner + text, reply_markup=kb)
    await cq.answer()


@router.callback_query(_is("own", {"people_imp_teachers"}))
async def ownui_people_imp_teachers(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    if _get_impersonation(_uid(cq)):
        return await cq.answer(
            "‚õî –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True
        )
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    uid = _uid(cq)
    banner = await _maybe_banner(uid)
    state_store.put_at(
        _people_imp_key(uid), "imp_teachers", {"mode": "await_csv"}, ttl_sec=1800
    )
    text = (
        "–ò–º–ø–æ—Ä—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª teachers.csv.\n"
        "–§–æ—Ä–º–∞—Ç: surname,name,patronymic,email,tef,capacity"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=cb("people_tpl", {"t": "teachers"}),
                )
            ],
            _nav_keyboard("people").inline_keyboard[0],
        ]
    )
    try:
        await cq.message.edit_text(banner + text, reply_markup=kb)
    except Exception:
        await cq.message.answer(banner + text, reply_markup=kb)
    await cq.answer()


@router.callback_query(_is("own", {"people_tpl"}))
async def ownui_people_tpl(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    t = (payload.get("t") or "").lower()
    tpls = get_templates()
    name = "teachers.csv" if t == "teachers" else "students.csv"
    data = tpls.get(name)
    if not data:
        return await cq.answer("–®–∞–±–ª–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    await cq.message.answer_document(
        types.BufferedInputFile(data, filename=name),
        caption="–®–∞–±–ª–æ–Ω CSV",
    )
    await cq.answer()


@router.message(F.document, lambda m: _awaits_imp(m, "imp_students"))
async def ownui_people_imp_students_receive(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return
    uid = _uid(m)
    doc = m.document
    file = await m.bot.get_file(doc.file_id)
    b = await m.bot.download_file(file.file_path)
    content = b.read()
    # Deduplicate by checksum per kind (do before state checks to show edge toast)
    import hashlib

    ck = hashlib.sha256(content).hexdigest()
    try:
        prev_ck_action, prev_ck = state_store.get(_people_imp_ck(uid, "students"))
    except Exception:
        prev_ck_action, prev_ck = None, None
    if prev_ck_action == "ck" and prev_ck == ck:
        await m.answer("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ checksum ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return
    state_store.put_at(_people_imp_ck(uid, "students"), "ck", ck, ttl_sec=3600)
    # Ensure we are in the awaited state
    try:
        st_action, st = state_store.get(_people_imp_key(uid))
    except Exception:
        return
    if st_action != "imp_students" or st.get("mode") != "await_csv":
        return

    # Filter rows with extra columns and warn
    filtered, dropped, headers_ok = _csv_filter_excess_columns(content, STUDENT_HEADERS)
    if headers_ok and dropped > 0:
        await m.answer(f"‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ CSV ‚Äî —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {dropped}")
    content = filtered
    res = import_students_csv(content)
    total = res.created + res.updated
    summary = f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {total} —Å—Ç—Ä–æ–∫, –æ—à–∏–±–æ–∫ {len(res.errors)}"
    await m.answer(summary)
    # Created/Updated breakdown
    await m.answer(f"–°–æ–∑–¥–∞–Ω–æ: {res.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {res.updated}")
    # Duplicate rows in CSV
    dups = sum(1 for e in res.errors if len(e) >= 3 and e[2] == E_DUPLICATE_USER)
    if dups:
        await m.answer(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ: {dups} ‚Äî —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    # Users summary
    us = get_users_summary()
    us_text = (
        f"–£—á–∏—Ç–µ–ª—è: –≤—Å–µ–≥–æ {us.get('teachers_total', 0)}, –±–µ–∑ TG {us.get('teachers_no_tg', 0)}\n"
        f"–°—Ç—É–¥–µ–Ω—Ç—ã: –≤—Å–µ–≥–æ {us.get('students_total', 0)}, –±–µ–∑ TG {us.get('students_no_tg', 0)}"
    )
    await m.answer(us_text, reply_markup=_nav_keyboard("people"))
    if res.errors:
        err_csv = res.to_error_csv()
        await m.answer_document(
            types.BufferedInputFile(err_csv, filename="students_import_errors.csv"),
            caption="–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞",
        )
    try:
        state_store.delete(_people_imp_key(uid))
    except Exception:
        pass


@router.message(F.document, lambda m: _awaits_imp(m, "imp_teachers"))
async def ownui_people_imp_teachers_receive(m: types.Message, actor: Identity):
    if actor.role != "owner":
        return
    uid = _uid(m)
    doc = m.document
    file = await m.bot.get_file(doc.file_id)
    b = await m.bot.download_file(file.file_path)
    content = b.read()
    # Deduplicate by checksum per kind (do before state checks to show edge toast)
    import hashlib

    ck = hashlib.sha256(content).hexdigest()
    try:
        prev_ck_action, prev_ck = state_store.get(_people_imp_ck(uid, "teachers"))
    except Exception:
        prev_ck_action, prev_ck = None, None
    if prev_ck_action == "ck" and prev_ck == ck:
        await m.answer("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ checksum ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return
    state_store.put_at(_people_imp_ck(uid, "teachers"), "ck", ck, ttl_sec=3600)
    # Ensure we are in the awaited state
    try:
        st_action, st = state_store.get(_people_imp_key(uid))
    except Exception:
        return
    if st_action != "imp_teachers" or st.get("mode") != "await_csv":
        return

    # Filter rows with extra columns and warn
    filtered, dropped, headers_ok = _csv_filter_excess_columns(content, TEACHER_HEADERS)
    if headers_ok and dropped > 0:
        await m.answer(f"‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ CSV ‚Äî —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {dropped}")
    content = filtered
    res = import_teachers_csv(content)
    total = res.created + res.updated
    summary = f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {total} —Å—Ç—Ä–æ–∫, –æ—à–∏–±–æ–∫ {len(res.errors)}"
    await m.answer(summary)
    # Created/Updated breakdown
    await m.answer(f"–°–æ–∑–¥–∞–Ω–æ: {res.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {res.updated}")
    # Duplicate rows in CSV
    dups = sum(1 for e in res.errors if len(e) >= 3 and e[2] == E_DUPLICATE_USER)
    if dups:
        await m.answer(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ: {dups} ‚Äî —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    # Users summary
    us = get_users_summary()
    us_text = (
        f"–£—á–∏—Ç–µ–ª—è: –≤—Å–µ–≥–æ {us.get('teachers_total', 0)}, –±–µ–∑ TG {us.get('teachers_no_tg', 0)}\n"
        f"–°—Ç—É–¥–µ–Ω—Ç—ã: –≤—Å–µ–≥–æ {us.get('students_total', 0)}, –±–µ–∑ TG {us.get('students_no_tg', 0)}"
    )
    await m.answer(us_text, reply_markup=_nav_keyboard("people"))
    if res.errors:
        err_csv = res.to_error_csv()
        await m.answer_document(
            types.BufferedInputFile(err_csv, filename="teachers_import_errors.csv"),
            caption="–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞",
        )
    try:
        state_store.delete(_people_imp_key(uid))
    except Exception:
        pass


# -------- Materials --------


def _materials_weeks_kb(page: int = 0) -> types.InlineKeyboardMarkup:
    # 28 per page, 7 columns
    per_page = 28
    total = 56  # stubbed count of weeks
    total_pages = max(1, (total + per_page - 1) // per_page)
    page = max(0, min(page, total_pages - 1))
    start = page * per_page + 1
    end = min(total, start + per_page - 1)
    rows: list[list[types.InlineKeyboardButton]] = []
    row: list[types.InlineKeyboardButton] = []
    for n in range(start, end + 1):
        row.append(
            types.InlineKeyboardButton(
                text=f"W{n}",
                callback_data=cb("materials_week", {"week": n}),
            )
        )
        if len(row) == 7:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    nav: list[types.InlineKeyboardButton] = []
    if page > 0:
        nav.append(
            types.InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=cb("materials_page", {"page": page - 1}),
            )
        )
    if page < total_pages - 1:
        nav.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ¬ª",
                callback_data=cb("materials_page", {"page": page + 1}),
            )
        )
    if nav:
        rows.append(nav)
    rows.append(_nav_keyboard("materials").inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("own", {"materials"}))
async def ownui_materials(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # –≥–∞—Å–∏–º —Ç–æ–∫–µ–Ω
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é",
        reply_markup=_materials_weeks_kb(),
    )
    await cq.answer()
    _stack_push(_uid(cq), "materials", {})


@router.callback_query(_is("own", {"materials_page"}))
async def ownui_materials_page(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    page = int(payload.get("page", 0))
    try:
        await cq.message.edit_reply_markup(reply_markup=_materials_weeks_kb(page))
    except Exception:
        banner = await _maybe_banner(_uid(cq))
        await cq.message.answer(
            banner + "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é",
            reply_markup=_materials_weeks_kb(page),
        )
    await cq.answer()


def _materials_types_kb(week: int) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
                callback_data=cb("mat_type", {"t": "p", "w": week}),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìò –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                callback_data=cb("mat_type", {"t": "m", "w": week}),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìù –ö–æ–Ω—Å–ø–µ–∫—Ç",
                callback_data=cb("mat_type", {"t": "n", "w": week}),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
                callback_data=cb("mat_type", {"t": "s", "w": week}),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üé• –ó–∞–ø–∏—Å–∏ –ª–µ–∫—Ü–∏–π",
                callback_data=cb("mat_type", {"t": "v", "w": week}),
            )
        ],
        _nav_keyboard("materials").inline_keyboard,
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=[*rows[:-1], rows[-1][0]])


@router.callback_query(_is("own", {"materials_week"}))
async def ownui_materials_week(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week = int(payload.get("week", 0))
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + f"–ù–µ–¥–µ–ª—è W{week}: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        reply_markup=_materials_types_kb(week),
    )
    await cq.answer()
    _stack_push(_uid(cq), "materials_week", {"week": week})


def _material_card_kb(
    week: int, t: str, impersonating: bool
) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å" + (" üîí" if impersonating else ""),
                callback_data=cb("mat_upload", {"w": week, "t": t}),
            ),
            types.InlineKeyboardButton(
                text="üìÇ –°–∫–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ",
                callback_data=cb("mat_download", {"w": week, "t": t}),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="üïì –ò—Å—Ç–æ—Ä–∏—è",
                callback_data=cb("mat_history", {"w": week, "t": t}),
            ),
            types.InlineKeyboardButton(
                text="üóÑÔ∏è –í –∞—Ä—Ö–∏–≤" + (" üîí" if impersonating else ""),
                callback_data=cb("mat_archive", {"w": week, "t": t}),
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å (–∏–∑ –∞—Ä—Ö–∏–≤–∞)" + (" üîí" if impersonating else ""),
                callback_data=cb("mat_delete", {"w": week, "t": t}),
            )
        ],
        _nav_keyboard("materials").inline_keyboard,
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=[*rows[:-1], rows[-1][0]])


@router.callback_query(_is("own", {"mat_type"}))
async def ownui_material_type(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week = int(payload.get("w", 0))
    t = payload.get("t", "?")
    imp = _get_impersonation(_uid(cq))
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=_material_card_kb(week, t, impersonating=bool(imp)),
    )
    await cq.answer()


@router.callback_query(
    _is(
        "own",
        {"mat_upload", "mat_download", "mat_history", "mat_archive", "mat_delete"},
    )
)
async def ownui_material_card_stubs(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    act = payload.get("action")
    imp = _get_impersonation(_uid(cq))
    if imp and act in {"mat_upload", "mat_archive", "mat_delete"}:
        return await cq.answer(
            "‚õî –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True
        )
    await cq.answer("‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)


# -------- Archive --------


def _archive_kb() -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
                callback_data=cb("arch_materials"),
            ),
            types.InlineKeyboardButton(
                text="–†–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
                callback_data=cb("arch_works"),
            ),
        ],
        _nav_keyboard("archive").inline_keyboard,
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=[rows[0], rows[1][0]])


@router.callback_query(_is("own", {"archive"}))
async def ownui_archive(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(banner + "üóÑÔ∏è –ê—Ä—Ö–∏–≤", reply_markup=_archive_kb())
    await cq.answer()
    _stack_push(_uid(cq), "archive", {})


@router.callback_query(_is("own", {"arch_materials"}))
async def ownui_arch_materials(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "–ê—Ä—Ö–∏–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é", reply_markup=_materials_weeks_kb()
    )
    await cq.answer()
    _stack_push(_uid(cq), "arch_materials_weeks", {})


@router.callback_query(_is("own", {"arch_materials_versions"}))
async def ownui_arch_materials_versions(cq: types.CallbackQuery, actor: Identity):
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week = int(payload.get("week", 0))
    imp = _get_impersonation(_uid(cq))
    lock = " üîí" if imp else ""
    rows = [
        [
            types.InlineKeyboardButton(
                text="üìÇ –°–∫–∞—á–∞—Ç—å –≤—Å—ë",
                callback_data=cb("arch_download_all", {"week": week}),
            ),
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë{lock}",
                callback_data=cb("arch_delete_all", {"week": week}),
            ),
        ],
        _nav_keyboard("archive").inline_keyboard[0],
    ]
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + f"–ê—Ä—Ö–∏–≤ W{week}: –≤–µ—Ä—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await cq.answer()
    _stack_push(_uid(cq), "arch_materials_versions", {"week": week})


@router.callback_query(_is("own", {"materials_week"}))
async def ownui_arch_materials_choose_week(cq: types.CallbackQuery, actor: Identity):
    # Branch only when previous was archive week selection
    st = _stack_get(_uid(cq))
    if not st or st[-1].get("s") not in ("arch_materials_weeks", "arch_works_weeks"):
        return  # handled elsewhere
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week = int(payload.get("week", 0))
    if st[-1].get("s") == "arch_materials_weeks":
        cq.data = cb("arch_materials_versions", {"week": week})
        return await ownui_arch_materials_versions(cq, actor)
    # Works flow
    surname = st[-1].get("p", {}).get("surname", "")
    cq.data = cb("arch_works_week", {"week": week, "surname": surname})
    return await ownui_arch_works_week(cq, actor)


@router.callback_query(_is("own", {"arch_works"}))
async def ownui_arch_works(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "–ê—Ä—Ö–∏–≤ —Ä–∞–±–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é",
        reply_markup=_nav_keyboard("archive"),
    )
    await cq.answer()
    _stack_push(_uid(cq), "arch_works_surname", {})


@router.callback_query(_is("own", {"arch_works_weeks"}))
async def ownui_arch_works_weeks(cq: types.CallbackQuery, actor: Identity):
    # Re-render weeks prompt after Back
    st = _stack_get(_uid(cq))
    surname = st[-1].get("p", {}).get("surname", "") if st else ""
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + f"–ù–∞–π–¥–µ–Ω–æ: {surname} (–∑–∞–≥–ª—É—à–∫–∞). –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é",
        reply_markup=_materials_weeks_kb(),
    )
    await cq.answer()


@router.callback_query(_is("own", {"arch_works_week"}))
async def ownui_arch_works_week(cq: types.CallbackQuery, actor: Identity):
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    week = int(payload.get("week", 0))
    imp = _get_impersonation(_uid(cq))
    lock = " üîí" if imp else ""
    rows = [
        [
            types.InlineKeyboardButton(
                text="üìÇ –°–∫–∞—á–∞—Ç—å –≤—Å—ë",
                callback_data=cb("arch_download_all", {"week": week}),
            ),
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë{lock}",
                callback_data=cb("arch_delete_all", {"week": week}),
            ),
        ],
        _nav_keyboard("archive").inline_keyboard[0],
    ]
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + f"–†–∞–±–æ—Ç—ã: {payload.get('surname', '')} W{week} (–∑–∞–≥–ª—É—à–∫–∞)",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await cq.answer()
    _stack_push(
        _uid(cq),
        "arch_works_week",
        {"week": week, "surname": payload.get("surname", "")},
    )


@router.callback_query(_is("own", {"arch_download_all", "arch_delete_all"}))
async def ownui_arch_bulk_actions(cq: types.CallbackQuery, actor: Identity):
    _, payload = callbacks.extract(cq.data, expected_role=actor.role)
    act = payload.get("action")
    if act == "arch_delete_all" and _get_impersonation(_uid(cq)):
        return await cq.answer(
            "‚õî –ë–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏",
            show_alert=True,
        )
    await cq.answer("‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)


# -------- Reports --------


def _reports_kb(impersonating: bool) -> types.InlineKeyboardMarkup:
    rows = [
        [
            types.InlineKeyboardButton(
                text="üì• –≠–∫—Å–ø–æ—Ä—Ç AuditLog",
                callback_data=cb("rep_audit"),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ü–µ–Ω–æ–∫",
                callback_data=cb("rep_grades"),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üì• –≠–∫—Å–ø–æ—Ä—Ç assignment matrix",
                callback_data=cb("rep_matrix"),
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üì• –≠–∫—Å–ø–æ—Ä—Ç –∫—É—Ä—Å–∞",
                callback_data=cb("rep_course"),
            )
        ],
        [
            types.InlineKeyboardButton(
                text=("üì¶ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø —Å–µ–π—á–∞—Å" + (" üîí" if impersonating else "")),
                callback_data=cb("rep_backup"),
            )
        ],
        _nav_keyboard("reports").inline_keyboard,
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=[*rows[:-1], rows[-1][0]])


@router.callback_query(_is("own", {"reports"}))
async def ownui_reports(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    imp = _get_impersonation(_uid(cq))
    lines = [
        "üìä –û—Ç—á—ë—Ç—ã –∏ –∞—É–¥–∏—Ç",
        "–ü–ª–∞–Ω–æ–≤—ã–π –±—ç–∫–∞–ø –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00 UTC",
    ]
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "\n".join(lines), reply_markup=_reports_kb(bool(imp))
    )
    await cq.answer()
    _stack_push(_uid(cq), "reports", {})


@router.callback_query(
    _is("own", {"rep_audit", "rep_grades", "rep_matrix", "rep_course"})
)
async def ownui_reports_stubs(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # –≥–∞—Å–∏–º —Ç–æ–∫–µ–Ω
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    # –ü–æ–ª–∏—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤: —Ç—Ä–µ–±—É–µ–º —Å–≤–µ–∂–∏–π –±—ç–∫–∞–ø –¥–ª—è —Ç—è–∂—ë–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞
    if not backup_recent():
        return await cq.answer("‚õî –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –Ω–µ—Ç —Å–≤–µ–∂–µ–≥–æ –±—ç–∫–∞–ø–∞", show_alert=True)
    await cq.answer("‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)


@router.callback_query(_is("own", {"rep_backup"}))
async def ownui_report_backup(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # –≥–∞—Å–∏–º —Ç–æ–∫–µ–Ω
    try:
        callbacks.extract(cq.data, expected_role=actor.role)
    except Exception:
        pass
    if _get_impersonation(_uid(cq)):
        return await cq.answer(
            "‚õî –ë—ç–∫–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True
        )
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–±—ç–∫–∞–ø (full –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–Ω–∞—á–µ incremental)
    try:
        trigger_backup("auto")
        await cq.answer("‚úÖ –ë—ç–∫–∞–ø –∑–∞–ø—É—â–µ–Ω", show_alert=True)
    except Exception as e:
        await cq.answer(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫–∞–ø: {e}", show_alert=True)


# -------- Impersonation --------


def _impersonation_idle_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    callback_data=cb("imp_start"),
                )
            ],
            _nav_keyboard("imp").inline_keyboard[0:1][0],
        ]
    )


def _impersonation_active_kb(role: str) -> types.InlineKeyboardMarkup:
    rows: list[list[types.InlineKeyboardButton]] = []
    if role == "student":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞",
                    callback_data=cb("imp_student_menu"),
                )
            ]
        )
    if role == "teacher":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                    callback_data=cb("imp_teacher_menu"),
                )
            ]
        )
    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚Ü©Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏—é",
                callback_data=cb("imp_stop"),
            )
        ]
    )
    rows.append(_nav_keyboard("imp").inline_keyboard[0])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


@router.callback_query(_is("own", {"impersonation"}))
async def ownui_impersonation(cq: types.CallbackQuery, actor: Identity):
    if actor.role != "owner":
        return await cq.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    imp = _get_impersonation(_uid(cq))
    if not imp:
        banner = await _maybe_banner(_uid(cq))
        await cq.message.answer(
            banner + "–í–≤–µ–¥–∏—Ç–µ tg_id –¥–ª—è –∏–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏–∏",
            reply_markup=_impersonation_idle_kb(),
        )
    else:
        banner = await _maybe_banner(_uid(cq))
        await cq.message.answer(
            banner, reply_markup=_impersonation_active_kb(imp.get("role", ""))
        )
    await cq.answer()
    _stack_push(_uid(cq), "imp", {})


@router.callback_query(_is("own", {"imp_start"}))
async def ownui_impersonation_start(cq: types.CallbackQuery, actor: Identity):
    uid = _uid(cq)
    state_store.put_at(
        _imp_key(uid),
        "imp_setup",
        {"mode": "expect_tg", "exp": _now() + 1800},
        ttl_sec=1800,
    )
    banner = await _maybe_banner(uid)
    await cq.message.answer(
        banner + "–í–≤–µ–¥–∏—Ç–µ tg_id:", reply_markup=_nav_keyboard("imp")
    )
    await cq.answer()


def _awaits_imp_tg(m: types.Message) -> bool:
    try:
        action, st = state_store.get(_imp_key(m.from_user.id))
    except Exception:
        return False
    return action == "imp_setup" and st.get("mode") == "expect_tg"


@router.message(F.text, _awaits_imp_tg)
async def ownui_impersonation_receive(m: types.Message, actor: Identity):
    # Only attempt to interpret when owner and waiting for tg
    if actor.role != "owner":
        return
    uid = _uid(m)
    tg = (m.text or "").strip()
    u = get_user_by_tg(tg)
    if not u:
        await m.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    state_store.put_at(
        _imp_key(uid),
        "imp_active",
        {"tg_id": tg, "role": u.role, "name": u.name, "exp": _now() + 1800},
        ttl_sec=1800,
    )
    banner = await _maybe_banner(uid)
    await m.answer(banner, reply_markup=_impersonation_active_kb(u.role))


@router.callback_query(_is("own", {"imp_student_menu", "imp_teacher_menu"}))
async def ownui_impersonation_menus(cq: types.CallbackQuery, actor: Identity):
    await cq.answer("‚õî –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)


@router.callback_query(_is("own", {"imp_stop"}))
async def ownui_impersonation_stop(cq: types.CallbackQuery, actor: Identity):
    try:
        state_store.delete(_imp_key(_uid(cq)))
    except Exception:
        pass
    banner = await _maybe_banner(_uid(cq))
    await cq.message.answer(
        banner + "–ò–º–ø–µ—Ä—Å–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=_nav_keyboard("imp")
    )
    await cq.answer()
